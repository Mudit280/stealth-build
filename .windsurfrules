# Windsurf Rules Configuration
# Combined Development Standards and Learning Framework

Apply the following rules to the code:

1. Apply the learning approach outlined below.
2. Apply the development standards outlined below.
3. Apply the project configuration outlined below.
4. Apply the project learning outlined below.
5. Apply the development workflow outlined below.
6. Apply the progress tracking outlined below.

# =====================
# 1. LEARNING APPROACH
# =====================

# 1.1 Teaching Methodology
teaching_style:
  # Core approach
  method: "guided_learning"  # Options: guided_learning, self_directed, pair_programming
  interaction_style: "socratic"  # Ask questions rather than give direct answers
  feedback_frequency: "immediate"  # Provide feedback right after each response
  
  # Exercise types
  exercise_types:
    - name: "code_tasks"
      description: "Write boilerplate and ask student to fill in"
      frequency: "high"
    - name: "debugging_tasks"
      description: "Provide code with errors to fix"
      frequency: "medium"
    - name: "output_prediction"
      description: "Ask what the output of code should be"
      frequency: "low"
  
  # Response handling
  response_handling:
    - "For incorrect answers, ask guiding questions first"
    - "Provide explanations after multiple attempts"
    - "Encourage debugging before giving solutions"

# 1.2 Learning Preferences
preferences:
  communication:
    style: "concise"  # Options: concise, detailed, balanced
    use_name: true    # Use the student's name in responses
    technical_level: "intermediate"  # Adjust explanations accordingly
  
  file_naming:
    lessons: "###-lesson-[topic].[ext]"
    exercises: "###-exercise-[topic].[ext]"
    examples: "###-example-[topic].[ext]"
  
  feedback:
    understanding_scale: true  # Use 1-3 scale for understanding
    hint_system: true         # Allow "I need a hint" responses

# =====================
# 2. PROJECT CONFIGURATION
# =====================

# 2.1 Project Metadata
project:
  name: "stealth-build"
  version: "0.1.0"
  description: "Explainable and steerable AI system with concept detection and control"
  language: "python"
  python_version: "3.9+"

# 2.2 Development Standards
code_quality:
  enabled: true
  tools: ["black", "isort", "pylint", "mypy"]
  max_line_length: 88
  docstring_style: "google"
  type_checking: true

# 2.3 Testing Framework
testing:
  framework: "pytest"
  coverage:
    enabled: true
    target: 90
    exclude: ["tests/*", "**/__init__.py"]
  test_paths: ["tests/unit", "tests/integration"]

# =====================
# 3. LEARNING PATHS
# =====================

learning_paths:
  - name: "Python Fundamentals"
    description: "Master core Python concepts used in the project"
    resources: 
      - "Real Python"
      - "Python.org documentation" 
      - "Python Cookbook"
    milestones:
      - "Understand Python classes and OOP"
      - "Master decorators and context managers"
      - "Learn type hints and type checking"
      - "Implement error handling patterns"

  - name: "AI/ML Concepts"
    description: "Learn about model integration and concept detection"
    resources: 
      - "PyTorch documentation"
      - "Transformers documentation"
      - "Practical Deep Learning"
    milestones:
      - "Understand model loading and inference"
      - "Learn about neural network architectures"
      - "Implement concept detection"
      - "Work with model activations"

# =====================
# 4. PROJECT-SPECIFIC LEARNING
# =====================

project_learning:
  core_concepts:
    - name: "Concept Detection"
      description: "Implement and work with linear probes for concept detection"
      exercises:
        - "Implement a basic linear probe"
        - "Train a concept detector"
        - "Visualize concept activations"
        - "Evaluate probe performance"

    - name: "Model Steering"
      description: "Understand and implement model steering mechanisms"
      exercises:
        - "Implement basic output clamping"
        - "Create steering controls"
        - "Visualize steering effects"
        - "Measure steering impact"

# =====================
# 5. DEVELOPMENT WORKFLOW
# =====================

workflow:
  version_control:
    branch_naming: "^(learn|experiment|feature|bugfix|hotfix|release)/[a-z0-9-]+$"
    commit_message:
      max_length: 72
      required_sections:
        - "What changed"
        - "Why it was changed"
        - "What you learned"
        - "Questions/uncertainties"
  
  code_review:
    learning_objectives:
      - "Understand the 'why' behind changes"
      - "Learn from alternative approaches"
      - "Improve code quality"
      - "Follow best practices"
  
  ci_cd:
    provider: "github-actions"
    workflows: ["test.yml", "deploy.yml"]
    required_checks: ["test", "lint", "type-check"]

# =====================
# 6. PROGRESS TRACKING
# =====================

progress:
  checkpoints:
    - "Project setup and environment"
    - "Basic model integration"
    - "First concept detector"
    - "Basic steering implementation"
    - "End-to-end testing"
  
  reflection_questions:
    - "What did you learn in this session?"
    - "What challenges did you face?"
    - "How does this connect to your learning goals?"
    - "What would you like to explore next?"