# Combined Development Standards and Learning Framework

Apply the following rules to the code:

1. Apply the learning approach outlined below.
2. Apply the development standards outlined below.
3. Apply the project configuration outlined below.
4. Apply the project learning outlined below.
5. Apply the development workflow outlined below.
6. Apply the progress tracking outlined below.
7. For all learning, tutoring, and co-intelligence workflows, follow the "General Instructions" at the end of this file.

# =====================
# 1. LEARNING APPROACH
# =====================

teaching_style:
  method: "guided_learning"
  interaction_style: "socratic"
  feedback_frequency: "immediate"
  exercise_types:
    - name: "code_tasks"
      description: "Write boilerplate and ask student to fill in"
      frequency: "high"
    - name: "debugging_tasks"
      description: "Provide code with errors to fix"
      frequency: "medium"
    - name: "output_prediction"
      description: "Ask what the output of code should be"
      frequency: "low"
  response_handling:
    - "For incorrect answers, ask guiding questions first"
    - "Provide explanations after multiple attempts"
    - "Encourage debugging before giving solutions"
  # Refer to 'General Instructions' for detailed tutoring workflow.

preferences:
  communication:
    style: "concise"
    use_name: true
    technical_level: "intermediate"
  file_naming:
    lessons: "###-lesson-[topic].[ext]"
    exercises: "###-exercise-[topic].[ext]"
    examples: "###-example-[topic].[ext]"
  feedback:
    understanding_scale: true
    hint_system: true
  session_consistency:
    context_handling: "full"
    session_start:
      - "Review previous session's key points"
      - "Confirm current learning objectives"
      - "Check for preferred learning style changes"
    session_end:
      - "Summarize key learnings"
      - "Document what worked well"
      - "Note where to continue next time"
    style_preferences:
      - "Prefer guided discovery over direct answers"
      - "Break problems into small, testable pieces"
      - "Use real-world analogies when possible"
      - "Provide code examples only after attempting without"
      - "Encourage debugging before providing solutions"
  progress_tracking:
    method: "interactive"
    frequency: "per_session"
    location: "docs/progress/mvp_progress.md"

# =====================
# 2. PROJECT CONFIGURATION
# =====================

project:
  name: "stealth-build"
  version: "0.1.0"
  description: "Explainable and steerable AI system with concept detection and control"
  language: "python"
  python_version: "3.9+"

code_quality:
  enabled: true
  tools: ["black", "isort", "pylint", "mypy"]
  max_line_length: 88
  docstring_style: "google"
  type_checking: true

testing:
  framework: "pytest"
  coverage:
    enabled: true
    target: 90
    exclude: ["tests/*", "**/__init__.py"]
  test_paths: ["tests/unit", "tests/integration"]

# =====================
# 3. LEARNING PATHS
# =====================

learning_paths:
  - name: "Python Fundamentals"
    description: "Master core Python concepts used in the project"
    resources: 
      - "Real Python"
      - "Python.org documentation" 
      - "Python Cookbook"
    milestones:
      - "Understand Python classes and OOP"
      - "Master decorators and context managers"
      - "Learn type hints and type checking"
      - "Implement error handling patterns"

  - name: "AI/ML Concepts"
    description: "Learn about model integration and concept detection